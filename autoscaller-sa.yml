---
- name: Set up Cluster Autoscaler ServiceAccount and RBAC
  hosts: localhost
  become: true
  vars:
    cluster_name: "kahus-0-2-workload"
    cluster_namespace: "default"
    tmp_dir: "/tmp/{{ cluster_name }}"
    mgmt_cluster_config: /home/kanderson/.kube/config-kahu-mgmt-logging
  environment:
    KUBECONFIG: "{{ mgmt_cluster_config }}"
  tasks:
    - name: Validate management cluster configuration
      block:
        - name: Check if kubeconfig file exists
          ansible.builtin.assert:
            that:
              - mgmt_cluster_config is defined
              - mgmt_cluster_config | length > 0
              - mgmt_cluster_config is file
            fail_msg: "Management cluster config file '{{ mgmt_cluster_config }}' does not exist or is not a file"
            success_msg: "Management cluster config file exists"

        - name: Verify CAPI management cluster
          ansible.builtin.shell: |
            kubectl api-resources --api-group=cluster.x-k8s.io --no-headers | wc -l
          register: capi_api_resources
          changed_when: false

        - name: Fail if no CAPI resources found
          ansible.builtin.fail:
            msg: "The cluster at '{{ mgmt_cluster_config }}' does not have Cluster API resources installed"
          when: capi_api_resources.stdout | int == 0

        - name: Verify workload cluster exists
          ansible.builtin.shell: |
            kubectl get cluster {{ cluster_name }} -n {{ cluster_namespace }} --no-headers | wc -l
          register: workload_cluster_exists
          changed_when: false

        - name: Fail if workload cluster does not exist
          ansible.builtin.fail:
            msg: "The workload cluster '{{ cluster_name }}' does not exist"
          when: workload_cluster_exists.stdout | int == 0

      rescue:
        - name: Handle validation failure
          ansible.builtin.fail:
            msg: "Failed to validate configuration: {{ ansible_failed_result.msg }}"

    - name: Get {{ cluster_name }} kubeconfig
      ansible.builtin.shell: >
        kubectl get secret {{ cluster_name }}-kubeconfig -n {{ cluster_namespace }} -o jsonpath='{.data.value}' | base64 --decode > {{ tmp_dir }}/{{ cluster_name }}.kubeconfig

    - name: Get {{ cluster_name }} UID
      ansible.builtin.shell: >
        kubectl get cluster {{ cluster_name }} -n {{ cluster_namespace }} -o jsonpath='{.metadata.uid}'
      register: cluster_uid_output

    - name: Set {{ cluster_name }} UID
      ansible.builtin.set_fact:
        cluster_uid: "{{ cluster_uid_output.stdout }}"

    - name: Create ServiceAccount with ownerReference
      ansible.builtin.template:
        src: "autoscaler-sa.yml.j2"
        dest: "{{ tmp_dir }}/{{ cluster_name }}-sa.yml"
        mode: 0644

    - name: Apply ServiceAccount
      ansible.builtin.shell: kubectl apply -f {{ tmp_dir }}/{{ cluster_name }}-sa.yml

    - name: Get SA token from secret
      ansible.builtin.shell: >
        kubectl get secret {{ cluster_name }}-cluster-autoscaler-token -n {{ cluster_namespace }} -o jsonpath='{.data.token}' | base64 --decode
      register: sa_token
      until: sa_token.stdout != ""
      retries: 10
      delay: 3

    - name: Create Role manifest for Machine API management
      ansible.builtin.template:
        src: "autoscaler-role.yml.j2"
        dest: "{{ tmp_dir }}/autoscaler-role.yml"
        mode: 0640

    - name: Create RoleBinding manifest
      ansible.builtin.template:
        src: "autoscaler-rolebinding.yml.j2"
        dest: "{{ tmp_dir }}/autoscaler-rolebinding.yml"
        mode: 0640

    - name: Apply RBAC manifests
      ansible.builtin.shell: >
        kubectl apply -f {{ tmp_dir }}/autoscaler-role.yml &&
        kubectl apply -f {{ tmp_dir }}/autoscaler-rolebinding.yml

    - name: Get current context
      ansible.builtin.shell: kubectl config current-context
      register: current_context

    - name: Get cluster name from current context
      ansible.builtin.shell: >
        kubectl config view -o jsonpath='{.contexts[?(@.name=="{{ current_context.stdout }}")].context.cluster}'
      register: context_cluster_name

    - name: Get management cluster endpoint by cluster name
      ansible.builtin.shell: >
        kubectl config view -o jsonpath='{.clusters[?(@.name=="{{ context_cluster_name.stdout }}")].cluster.server}'
      register: mgmt_cluster_endpoint

    - name: Set management cluster endpoint
      ansible.builtin.set_fact:
        cluster_endpoint: "{{ mgmt_cluster_endpoint.stdout }}"

    - name: Get management CA cert by cluster name
      ansible.builtin.shell: >
        kubectl config view --raw -o jsonpath='{.clusters[?(@.name=="{{ context_cluster_name.stdout }}")].cluster.certificate-authority-data}'
      register: management_ca_crt

    - name: Set management cluster CA
      ansible.builtin.set_fact:
        cluster_ca_crt: "{{ management_ca_crt.stdout }}"

    - name: Create autoscaler kubeconfig from SA token
      ansible.builtin.copy:
        dest: "{{ tmp_dir }}/autoscaler-kubeconfig"
        mode: '0600'
        content: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: capi-cluster
            cluster:
              certificate-authority-data: {{ cluster_ca_crt }}
              server: {{ cluster_endpoint }}
          contexts:
          - name: capi-context
            context:
              cluster: capi-cluster
              user: sa-user
              namespace: {{ cluster_namespace }}
          current-context: capi-context
          users:
          - name: sa-user
            user:
              token: {{ sa_token.stdout }}

    - name: Create kubeconfig secret for autoscaler in workload cluster kube-system namespace
      ansible.builtin.shell: >
        kubectl --kubeconfig {{ tmp_dir }}/{{ cluster_name }}.kubeconfig create secret generic kubeconfig \
          --from-file=kubeconfig={{ tmp_dir }}/autoscaler-kubeconfig -n kube-system --dry-run=client -o yaml | \
        kubectl --kubeconfig {{ tmp_dir }}/{{ cluster_name }}.kubeconfig apply -f -

    - name: Get cluster-autoscaler pod name
      ansible.builtin.shell: >
        kubectl --kubeconfig {{ tmp_dir }}/{{ cluster_name }}.kubeconfig get pods -A | grep cluster-autoscaler | awk '{print $2}'
      register: autoscaler_pod_name

    - name: Restart cluster-autoscaler pod
      ansible.builtin.shell: >
        kubectl --kubeconfig {{ tmp_dir }}/{{ cluster_name }}.kubeconfig delete pod {{ autoscaler_pod_name.stdout }} -n kube-system